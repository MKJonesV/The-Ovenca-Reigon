public class Types extends Pokemon{
  
  private String type1;
  private String type2;
  private int num1;
  private int num2;
  
  public String[] types = {"Normal", "Grass", "Fire", "Water", "Electric", "Bug", "Fighting", "Psychic", "Dark", "Rock", "Ground", "Steel", "Poison", "Flying", "Ghost", "Ice", "Fairy", "Dragon", "Light"};
  public double[][] effectiveness = {{1, 1, 1, 1, 1, 1, 1, 1, 1, 0.5, 1, 0.5, 1, 1, 0, 1, 1, 1, 1}, {1, 0.5, 0.5, 2, 1, 0.5, 1, 1, 1, 2, 2, 0.5, 0.5, 0.5, 1, 1, 1, 0.5, 2}, {1, 2, 0.5, 0.5, 1, 2, 1, 1, 1, 0.5, 1, 2, 1, 1, 1, 2, 1, 0.5, 0.5}, {1, 0.5, 2, 0.5, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 0.5, 2}, {1, 0.5, 1, 2, 0.5, 1, 1, 1, 1, 1, 0, 1, 1, 2, 1, 1, 1, 0.5, 0.5}, {1, 2, 0.5, 1, 1, 0.5, 2, 2, 1, 1, 0.5, 0.5, 0.5, 1, 1, 0.5, 1, 0.5}, {2, 1, 1, 1, 1, 0.5, 1, 0.5, 2, 2, 1, 2, 0.5, 0.5, 0, 2, 0.5, 1, 1}, {1, 1, 1, 1, 1, 1, 2, 0.5, 0, 1, 1, 0.5, 2, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 0.5, 2, 0.5, 1, 1, 1, 1, 1, 2, 1, 0.5, 1, 0}, {1, 1, 2, 1, 1, 2, 0.5, 1, 1, 1, 0.5, 0.5, 1, 2, 1, 2, 1, 1, 1}, {1, 0.5, 2, 1, 2, 0.5, 1, 1, 1, 2, 1, 2, 2, 0, 1, 1, 1, 1, 1}, {1, 1, 0.5, 0.5, 0.5, 1, 1, 1, 1, 2, 1, 0.5, 1, 1, 1, 2, 2, 1, 2}, {1, 2, 1, 1, 1, 1, 1, 1, 1, 0.5, 0.5, 0, 0.5, 1, 0.5, 1, 2, 1, 1}, {1, 1, 1, 2, 0.5, 2, 2, 1, 1, 0.5, 1, 0.5, 1, 1, 1, 1, 1, 1, 1}, {0, 1, 1, 1, 1, 1, 1, 2, 0.5, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0.5}, {1, 2, 0.5, 0.5, 1, 1, 1, 1, 1, 1, 2, 0.5, 1, 2, 1, 0.5, 1, 2, 2}, {1, 1, 0.5, 1, 1, 1, 2, 1, 2, 1, 1, 0.5, 0.5, 1, 1, 1, 1, 2, 0.5}, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.5, 1, 1, 1, 1, 0, 2, 1}, {1, 0.5, 0.5, 0.5, 0.5, 2, 1, 1, 2, 1, 1, 0.5, 1, 2, 2, 0.5, 2, 2, 1}};
  
  public Types(String pkmType){ // Moves
    String comparator;
    if(pkmType.indexOf("/") > -1){
      type1 = pkmType.substring(0, pkmType.indexOf("/"));
      type2 = pkmType.substring(pkmType.indexOf("/")+1);
    } else {
      type1 = pkmType;
      type2 = "";
    }
    // Sets the type(s) of the pokemon by name
    for(int i = 0; i < types.length; i++){
      comparator = types[i];
      if(comparator.equals(type1))
        num1 = i;
      if(comparator.equals(type2))
        num2 = i;
    }
    // Sets the type(s) of the pokemon by index according to the array
  }
  
  public Types(int d){ // Pokemon
    super(d);
    String comparator;
    if(pkmTypes[dexNum].indexOf("/") > -1){
      type1 = pkmTypes[dexNum].substring(0, pkmTypes[dexNum].indexOf("/"));
      type2 = pkmTypes[dexNum].substring(pkmTypes[dexNum].indexOf("/")+1);
    } else {
      type1 = pkmTypes[dexNum];
      type2 = "";
    }
    for(int i = 0; i < types.length; i++){
      comparator = types[i];
      if(comparator.equals(type1))
        num1 = i;
      if(comparator.equals(type2))
        num2 = i;
    }
  }

  public String getRandomType(){ // Random Type
    type1 = types[(dexNum+1)%20];
    return type1;
  }
  
  public String getPrimaryType(){ // Returns first type
    return type1;
  }
  public String getSecondaryType(){ // Returns second type
    if(type2 != ""){      
      return type2;
    }
    return "";
  }
  public int getType1Val(){ // Returns index of first type
    return num1;
  }
  public int getType2Val(){ // Returns index of second type
    if(type2 != ""){      
      return num2;
    }
    return -1;
  }
  public double effectivity(Types t){ // Calculates effectiveness of moves based on opponents type
    double e = 1;
    e *= effectiveness[num1][t.getType1Val()];
    if(type2 != ""){
      e *= effectiveness[num1][t.getType2Val()];
    }
    return e;
  }
}
